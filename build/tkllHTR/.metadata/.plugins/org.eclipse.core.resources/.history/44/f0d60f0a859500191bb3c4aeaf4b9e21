#include <stdio.h>
#include <math.h>
#include "matrix.h"

// Number of units in each layer
#define UNIT_LAYER_INPUT	784
#define UNIT_LAYER_1		64
#define UNIT_LAYER_OUTPUT	10

Matrix ReLU(Matrix* input){
    Matrix result = new_matrix(input->row, input->col);
    for(int i = 0 ; i < result.row ; i++)
    	for (int j = 0 ; j < result.col ; j++)
    		result.at[i][j] = input->at[i][j] >= 0 ? input->at[i][j] : 0;
    return result;
}

Matrix SoftMax(Matrix* input){
	int row = input->row;
	int col = input->col;
    double sum = 0;
	Matrix exponential = new_matrix(row, col);
	for(int i = 0 ; i < row ; i++) {
    	for (int j = 0 ; j < col ; j++) {
    		exponential.at[i][j] = exp(input->at[i][j]);
    		sum += exponential.at[i][j];
    	}
    }

    for(int i = 0 ; i < row ; i++)
    	for (int j = 0 ; j < col ; j++)
    		exponential.at[i][j] /= sum;

    int maxi = 0;
    int maxj = 0;
    for (int i = 0 ; i < row ; i++)
    	for (int j = 0 ; j < row ; j++)
    		if (exponential.at[i][j] > exponential.at[maxi][maxj])
    			maxi = i, maxj = j;
    return input->at[maxIndex][0];
}

int MLP(Matrix input){
	Matrix w1 = new_matrix(UNIT_LAYER_INPUT, UNIT_LAYER_1);		// 784x64
	Matrix b1 = new_matrix(1, UNIT_LAYER_1);					// 1x64
	Matrix w2 = new_matrix(UNIT_LAYER_1, UNIT_LAYER_OUTPUT);	// 64x10
	Matrix b2 = new_matrix(1, UNIT_LAYER_OUTPUT);				// 1x10

	Matrix hidden_1;
	Matrix output;

    int result = -1;

    hidden_1 = ReLU(add(&(mul(input, w1)), b1));
    output  = ReLU(add(&mul(hidden_1, w2), b2));
    return result = SoftMax(output);
}
