#include "xparameters.h"
#include "xstatus.h"
#include "xil_types.h"
#include "xil_assert.h"
#include "xuartps_hw.h"
#include "xil_printf.h"

/************************** Constant Definitions ***************************/

/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define UART_BASEADDR		XPAR_XUARTPS_0_BASEADDR
#define UART_CLOCK_HZ		XPAR_XUARTPS_0_CLOCK_HZ
/*
 * The following constant controls the length of the buffers to be sent
 * and received with the device. This constant must be 32 bytes or less so the
 * entire buffer will fit into the TX and RX FIFOs of the device.
 */
#define BUFFER_SIZE	16

#define CHAR_ESC			0x1b	/* 'ESC' character is used as terminator */

#define IDLE_STATE			1
#define EXECUTION_STATE		2
#define RESULT_STATE		3
#define TIMEOUT				1000

/************************** Variable Definitions ***************************/

/*
 * The following buffers are used in this example to send and receive data
 * with the UART.
 */
u8 SendBuffer[BUFFER_SIZE];	/* Buffer for Transmitting Data */

int main(){
	int state = IDLE_STATE;
	u8 Running = TRUE;
	u8 Reading;
	int Index;
	int InputSize;
	int Watchdog = 0;
	int Counter;
	u8 RecvChar;
	u32 CntrlRegister;

	CntrlRegister = XUartPs_ReadReg(UART_BASEADDR, XUARTPS_CR_OFFSET);

	/* Enable TX and RX for the device */
	XUartPs_WriteReg(UART_BASEADDR, XUARTPS_CR_OFFSET,
			  ((CntrlRegister & ~XUARTPS_CR_EN_DIS_MASK) |
			   XUARTPS_CR_TX_EN | XUARTPS_CR_RX_EN));

	while (Running) {
		switch (state){
			case IDLE_STATE:
				Watchdog++;
				if (Watchdog > 3000) {
					Running = FALSE;
					break;
				}
				/*Initialize variables*/
				InputSize = 0;

				/* Wait until there is data */
				while (!XUartPs_IsReceiveData(UART_BASEADDR));

				while (Reading) {
					Counter = 0;
					Reading = TRUE;
					while (!XUartPs_IsReceiveData(UART_BASEADDR)) {
						Counter++;
						if (Counter > TIMEOUT) {
							Reading = FALSE;
							break;
						}
					}
					if (Reading) {
						RecvChar = XUartPs_ReadReg(UART_BASEADDR, XUARTPS_FIFO_OFFSET);
						SendBuffer[InputSize++] = RecvChar;
					}
				}
				state = EXECUTION_STATE;
				break;
			case EXECUTION_STATE:
				xil_printf("Input size: %d\n\r", InputSize);
				for (Index = 0 ; Index < InputSize ; ++Index)
					SendBuffer[Index] = SendBuffer[Index] + 2;
				state = RESULT_STATE;
				break;
			case RESULT_STATE:
				/* Echo the character back */
				for (Index = 0 ; Index < InputSize ; ++Index)
					XUartPs_WriteReg(UART_BASEADDR,  XUARTPS_FIFO_OFFSET, SendBuffer[Index]);
				state = IDLE_STATE;
				break;
		}
	}
	return 0;
}
